break



####### BULK IMPORT

Set-Location 'C:\Users\administrator.COHOVINEYARD\Documents\MVA\06 - Replication'
Get-ChildItem *.csv

# Import CSV containing all sites and pipe to New-ADReplicationSite
Import-CSV .\ADSites.csv | New-ADReplicationSite

# Import CSV containing all sites and pipe to New-ADReplicationSubnet
Import-CSV .\ADSubnets.csv | New-ADReplicationSubnet

# Import CSV and build site links
Import-CSV .\ADSiteLinks.csv |
  ForEach-Object { New-ADReplicationSiteLink -Name $_.Name -SitesIncluded $_.SiteA,$_.SiteB -Cost $_.Cost -ReplicationFrequencyInMinutes $_.Interval }

# Turn on change notification because you convinced management to let you.

# Get all site links where notification is not enabled
Get-ADReplicationSiteLink -filter * -Properties Options |
  Where-Object { $_.Options -eq $null } | ft

# Enable ChangeNotification
Get-ADReplicationSiteLink -filter * -Properties Options |
  Where-Object { $_.Options -eq $null } |
  Set-ADReplicationSiteLink -Replace @{'options'=5}

# Find manual COs
Get-ADReplicationConnection -Filter {AutoGenerated -eq $false}

# Find manual COs and set them to auto. Consider filtering this. 
Get-ADReplicationConnection -Filter {AutoGenerated -eq $false} |
  Set-ADReplicationConnection -Replace @{'options'=1}


####### Basic Gets for topology

# List domain controllers
Get-ADDomainController -Filter * | ogv

# Replication infrastructure
Get-ADReplicationSubnet -Filter * | ogv
Get-ADReplicationSite -Filter * | ogv
 # SiteLinks - note Options property for change notification
Get-ADReplicationSiteLink -Filter * -Properties Options
Get-ADReplicationConnection -Filter * | ogv
Get-ADReplicationConnection -Filter * |
    Select-Object AutoGenerated, Name, ReplicateToDirectoryServer, ReplicateFromDirectoryServer | ft -Wrap



####### PS AD v1 examples of similar fuctions

# Report of all site links and related settings
Get-ADObject -Filter 'objectClass -eq "siteLink"' -Searchbase (Get-ADRootDSE).ConfigurationNamingContext -Property Options, Cost, ReplInterval, SiteList, Schedule |
     Select-Object Name, @{Name="SiteCount";Expression={$_.SiteList.Count}}, Cost, ReplInterval, @{Name="Schedule";Expression={If($_.Schedule){If(($_.Schedule -Join " ").Contains("240")){"NonDefault"}Else{"24x7"}}Else{"24x7"}}}, Options |
     Format-Table * -AutoSize

# Enable change notification, set cost to 100, set interval to 15 minutes for all site links
# Get-ADObject -Filter 'objectClass -eq "siteLink"' -SearchBase (Get-ADRootDSE).ConfigurationNamingContext | Set-ADObject -Replace @{Cost=100;ReplInterval=15;Options=1} 

# Enable change notification for all site links
# Get-ADObject -Filter 'objectClass -eq "siteLink"' -SearchBase (Get-ADRootDSE).ConfigurationNamingContext | Set-ADObject -Replace @{Options=1} 

# Enable change notification for all site links that match a name wildcard
# Edit the wildcard to your preference
# Get-ADObject -Filter 'objectClass -eq "siteLink" -and name -like "*foo*"' -SearchBase (Get-ADRootDSE).ConfigurationNamingContext | Set-ADObject -Replace @{Options=1}

# Reset all site link schedules to 24x7
#Get-ADObject -Filter 'objectClass -eq "siteLink" -and schedule -like "*"' -SearchBase (Get-ADRootDSE).ConfigurationNamingContext | Set-ADObject -Clear Schedule

# Emtpy site links
Get-ADObject -LDAPFilter '(&(objectClass=siteLink)(!siteList=*))' -SearchBase (Get-ADRootDSE).ConfigurationNamingContext | Format-Table Name

# Empty sites (no DC)
Get-ADObject -LDAPFilter '(objectClass=site)' -SearchBase (Get-ADRootDSE).ConfigurationNamingContext |
    Where-Object {-not (Get-ADObject -Filter {ObjectClass -eq "nTDSDSA"} -SearchBase $_.DistinguishedName)} |
    Format-Table Name

# REALLY COOL REPORT
# Sites and Stats
Get-ADObject -LDAPFilter '(objectClass=site)' -SearchBase (Get-ADRootDSE).ConfigurationNamingContext -Properties WhenCreated, Description |
Select-Object *, `
    @{label='IsEmpty';expression={If ($(Get-ADObject -Filter {ObjectClass -eq "nTDSDSA"} -SearchBase $_.DistinguishedName)) {$false} else {$true}}}, `
    @{label='DCCount';expression={@($(Get-ADObject -Filter {ObjectClass -eq "nTDSDSA"} -SearchBase $_.DistinguishedName)).Count}}, `
    @{label='SubnetCount';expression={@($(Get-ADObject -Filter {ObjectClass -eq "subnet" -and siteObject -eq $_.DistinguishedName} -SearchBase (Get-ADRootDSE).ConfigurationNamingContext)).Count}}, `
    @{label='SiteLinkCount';expression={@($(Get-ADObject -Filter {ObjectClass -eq "sitelink" -and siteList -eq $_.DistinguishedName} -SearchBase (Get-ADRootDSE).ConfigurationNamingContext)).Count}} |
Sort-Object Name |
Format-Table Name, SiteLinkCount, SubnetCount, DCCount, IsEmpty, WhenCreated, Description -AutoSize

#Subnets without sites
Get-ADObject -LDAPFilter '(&(objectClass=subnet)(!siteObject=*))' -SearchBase (Get-ADRootDSE).ConfigurationNamingContext -Property Name | Format-Table Name





# Cleanup
$d = (Get-Date).AddDays(-1)
Get-ADReplicationSubnet -filter {whenCreated -gt $d} | Remove-ADReplicationSubnet -Confirm:$true
Get-ADReplicationSiteLink -filter {whenCreated -gt $d} | Remove-ADReplicationSiteLink -Confirm:$true
Get-ADReplicationSite -filter {whenCreated -gt $d} | Remove-ADReplicationSite -Confirm:$true
