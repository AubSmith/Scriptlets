break


# Quick inactivity report
Search-ADAccount -AccountInactive -ComputersOnly | ogv

# Timespan
Search-ADAccount -AccountInactive -ComputersOnly -TimeSpan (New-TimeSpan -Days 90) | ogv

# Datetime
Search-ADAccount -AccountInactive -ComputersOnly -DateTime '10/1/2014' | ogv

# Disabled
Search-ADAccount -AccountDisabled -ComputersOnly


# Can add logic for DNS lookups, PING, etc.



##########################################################################
# FIND ACTIVE XP COMPUTERS
##########################################################################


Import-Module ActiveDirectory

# The basic query for all XP computers in the domain
$XP = Get-ADComputer -Filter {OperatingSystem -like "*XP*"}

# The full-featured query
$XP = Get-ADComputer -Filter {OperatingSystem -like "*XP*"} `
    -Properties Name, DNSHostName, OperatingSystem, `
        OperatingSystemServicePack, OperatingSystemVersion, PasswordLastSet, `
        whenCreated, whenChanged, LastLogonTimestamp, nTSecurityDescriptor, `
        DistinguishedName |
    Select-Object Name, DNSHostName, OperatingSystem, `
        OperatingSystemServicePack, OperatingSystemVersion, PasswordLastSet, `
        whenCreated, whenChanged, `
        @{name='LastLogonTimestampDT';`
            Expression={[datetime]::FromFileTimeUTC($_.LastLogonTimestamp)}}, `
        @{name='Owner';`
            Expression={$_.nTSecurityDescriptor.Owner}}, `
        DistinguishedName

# Get only active XP computers in the last 90 days
$XP = Get-ADComputer -Filter {OperatingSystem -like "*XP*"} `
    -Properties Name, DNSHostName, OperatingSystem, `
        OperatingSystemServicePack, OperatingSystemVersion, PasswordLastSet, `
        whenCreated, whenChanged, LastLogonTimestamp, nTSecurityDescriptor, `
        DistinguishedName |
    Where-Object {$_.whenChanged -gt $((Get-Date).AddDays(-90))} |
    Select-Object Name, DNSHostName, OperatingSystem, `
        OperatingSystemServicePack, OperatingSystemVersion, PasswordLastSet, `
        whenCreated, whenChanged, `
        @{name='LastLogonTimestampDT';`
            Expression={[datetime]::FromFileTimeUTC($_.LastLogonTimestamp)}}, `
        @{name='Owner';`
            Expression={$_.nTSecurityDescriptor.Owner}}, `
        DistinguishedName

# View graphically
$XP | Out-GridView

# Export to CSV
$XP | Export-CSV .\xp.csv -NoTypeInformation

# Count how many computers
($XP | Measure-Object).Count

# Days to Windows XP end-of-life
(New-TimeSpan -End (Get-Date -Day 8 -Month 4 -Year 2014 `
    -Hour 0 -Minute 0 -Second 0)).Days






###############################################################################
# Stale User Data
Import-Module ActiveDirectory
Get-ADUser -Filter * -Property sAMAccountName, distinguishedName, PasswordExpired, Enabled, AccountExpirationDate, whenCreated, whenChanged, LastLogonDate, PasswordLastSet, PasswordNeverExpires, PasswordNotRequired, logonCount, userAccountControl -ResultPageSize 200 | Select-Object sAMAccountName, distinguishedName, PasswordExpired, Enabled, @{name='PasswordAgeDays';expression={(New-Timespan -Start $_.PasswordLastSet -End (Get-Date)).Days}}, AccountExpirationDate, @{name='LastLogonDays';expression={(New-Timespan -Start $_.LastLogonDate -End (Get-Date)).Days}}, whenCreated, whenChanged, LastLogonDate, PasswordLastSet, PasswordNeverExpires, PasswordNotRequired, logonCount, userAccountControl | Export-CSV ".\Report_Of_Stale_Users_$(Get-Date -UFormat %Y%m%d%H%M%S).csv" -NoTypeInformation

###############################################################################
# Stale Computer Data
Import-Module ActiveDirectory
Get-ADComputer -Filter * -Property Name, DNSHostName, distinguishedName, OperatingSystem, PasswordExpired, Enabled, AccountExpirationDate, whenCreated, whenChanged, LastLogonDate, PasswordLastSet, PasswordNeverExpires, PasswordNotRequired, logonCount, userAccountControl -ResultPageSize 200 | Select-Object Name, DNSHostName, distinguishedName, OperatingSystem, PasswordExpired, Enabled, @{name='PasswordAgeDays';expression={(New-Timespan -Start $_.PasswordLastSet -End (Get-Date)).Days}}, AccountExpirationDate, @{name='LastLogonDays';expression={(New-Timespan -Start $_.LastLogonDate -End (Get-Date)).Days}}, whenCreated, whenChanged, LastLogonDate, PasswordLastSet, PasswordNeverExpires, PasswordNotRequired, logonCount, userAccountControl | Export-CSV ".\Report_Of_Stale_Computers_$(Get-Date -UFormat %Y%m%d%H%M%S).csv" -NoTypeInformation

###############################################################################
# Ping the list of computers using jobs and throttling
# Note that if Windows Firewall is on by default PINGs will time out.

# This is the file generated by the previous line of computer stale report.
# Make sure it has a column called NAME for the computers.
# Delete the rows that you do not want to ping.
$ComputerCSVFile = 'Report_Of_Stale_Computers_20121030162518.csv'

$csv = Import-CSV $ComputerCSVFile | Select-Object *, Ping, IPv4Address
$PCs = $csv | Select-Object -ExpandProperty Name

Get-Job | Remove-Job
$job = Test-Connection $PCs -Count 1 -ErrorAction 'SilentlyContinue' -AsJob -ThrottleLimit 32

While ($job.State -eq 'Running') {
    Start-Sleep -Seconds 1
}

ForEach ($result in ($job | Receive-Job)) {
    $ResultInCSV = $csv | Where-Object {$_.Name -eq $result.Address} | Select-Object -First 1
    If ($result.StatusCode -eq 0) {
        $ResultInCSV.Ping = $true
    } Else {
        $ResultInCSV.Ping = $false
    }
    $ResultInCSV.IPv4Address = $result.IPv4Address
}

$job | Remove-Job
$csv | Export-CSV ".\Report_Of_Stale_Computers_With_Ping_$(Get-Date -UFormat %Y%m%d%H%M%S).csv" -NoTypeInformation

###############################################################################
# Move and disable accounts

# OU path for move
$DestOU = 'OU=ToBeDeleted,DC=cohovineyard,DC=com'
# CSV file of AD objects to be disabled and moved.
# Can be users or computers.
# Must have one column titled 'distinguishedName'.
$CSVFile = 'tobedeleted.csv'

$csv = Import-CSV $CSVFile | Select-Object -ExpandProperty distinguishedName
ForEach ($ado in $csv) {
    Disable-ADAccount -Identity $ado
    Move-ADObject -Identity $ado -TargetPath $DestOU
}

###############################################################################

