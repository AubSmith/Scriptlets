#Generated Form Function
function GenerateForm {
########################################################################
# Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.10.0
# Generated On: 2014-02-25 14:52
# Generated By: Jean-Sebastien Elie
Import-Module ActiveDirectory
########################################################################

#region Import the Assemblies
[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
#endregion

#region Generated Form Objects
$form1 = New-Object System.Windows.Forms.Form
$blist = New-Object System.Windows.Forms.Button
$bexport = New-Object System.Windows.Forms.Button
$bclear = New-Object System.Windows.Forms.Button
$bapply = New-Object System.Windows.Forms.Button
$bvalidate = New-Object System.Windows.Forms.Button
$infodisplay = New-Object System.Windows.Forms.Label
$lchkuser = New-Object System.Windows.Forms.Label
$chkuser = New-Object System.Windows.Forms.CheckedListBox
$chk = New-Object System.Windows.Forms.CheckBox
$Entry = New-Object System.Windows.Forms.Label
$tentry = New-Object System.Windows.Forms.TextBox
$tuser = New-Object System.Windows.Forms.Label
$cmbuser = New-Object System.Windows.Forms.ComboBox
$lchoice = New-Object System.Windows.Forms.ListBox
$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
#endregion Generated Form Objects

#----------------------------------------------
#Generated Event Script Blocks
#----------------------------------------------
#Provide Custom Code for events specified in PrimalForms.

$arrac = get-aduser -SearchBase "OU=Actif,OU=Usagers,OU=,DC=z,DC=local" -Filter *  
$arrgrpou = Get-ADOrganizationalUnit -filter * -searchbase "OU=Groupes,OU=,DC=,DC=local" |sort-object 
$arradgrp = Get-ADGroup -Filter * -SearchBase "OU=Groupes,OU=h,DC=,DC=local" | sort


# Feed Listbox with choice of Function
$lchoice.items.add("Unlock User account")
$lchoice.items.add("Last Logon")
$lchoice.items.add("Change Display Name")
$lchoice.items.add("Create Folder")
$lchoice.items.add("Creating AD Group")
$lchoice.items.add("Adding user To AD Group")
$lchoice.items.add("Removing user To AD Group")
$lchoice.items.add("ACl to Folder")

Function Lastlogon

    {

    $entry.visible = $true
    $entry.text = " Last Logon x days?"
    $day = $tentry.text
    $x=((Get-Date).AddDays(-$day))
    # Feeding array with lastlogondate and if user is enabled properties.
    $arrlogon = Get-ADUser -Filter { lastlogondate -lt $x } -Properties lastlogondate, enabled 
    
    
        if ($day -eq "") { $infodisplay.Text = ""}
    
        else{
     #Feeding combobox With User Names       
               foreach($user in $arrlogon)
               {
               if ($user.enabled -eq $True) {
                  $chkuser.items.add($user.name)} 
                                      }
                    $lchkuser.Text = " Unused Account since $day/ Enabled"
                    $lchkuser.visible = $True
                    $bexport.visible = $True
                    $bapply.visible = $true
                    $chkuser.visible = $True
                    $bclear.Visible = $true
                    $chk.visible = $True
                    $chk.text = " Disable Users ?"
                if ( $day -ne "") {
                $blist.visible = $false
                $tentry.enabled = $false
                }
                    
                         
                 }
        }
     
Function DisableUser
    {
    # Verifies the checkedbox was checked for disabling user
    if ($chk.checked -eq $true) {
                $arrdisable = $chkuser.checkeditems
                
                # Feed a Var for each query made for the user Distinguished Name
                foreach($duser in $arrdisable)
                     {
                        $dsuser = Get-ADUser -filter * | where {$_.Name -eq "$duser"} 
                        Disable-ADAccount -identity "$dsuser"
                                        }
               } 
      }  

Function locked

    {
     #Query AD for Locked account
        $arrlock = Search-ADAccount -LockedOut
        $lchkuser.visible = $True
        $chkuser.visible = $True
        $bapply.text = "Unlock"
        $lchkuser.text = " User Locked"
    #Feed checkedlistbox with Samaccountname
        foreach($user in $arrlock)
                {
                    $chkuser.items.add($user.SamAccountName)
                                        }                  
                   
    }

Function Unlock
    {
     $chkuser.enabled = $False

     #Feed an array with all checked items
     $arrlockeduser = $chkuser.CheckedItems

     #Unlock each user in the previous array.
     foreach($user in $arrlockeduser)
                {
                  Unlock-ADAccount -identity "$user" 
                                        }
     } 

Function ChangeDN
{
    #Gather required info of Selected user
    $index = $cmbuser.selectedindex
    $iuser = $arrac[$index]
    $dnuser = get-aduser  $iuser.SamAccountName  | select -ExpandProperty SamAccountName
    $dn = $tentry.text
    Set-ADUser -identity "$dnuser" -DisplayName "$dn"


}

Function Feedcmbuser
{
# Feed the cmbuser combobox
$tuser.visible = $true
$cmbuser.visible = $true
foreach($user in $arrac)
                {
                    $cmbuser.items.add($user.name)
                                        }
}

Function InfoDN
{
# Display the Displayname of selected user
   $infodisplay.visible = $true
   if ($cmbuser.SelectedIndex -eq -1) {$infodisplay.text = ""}
   else {
    $index = $cmbuser.selectedindex
    $iuser = $arrac[$index]
    $arrdp = get-aduser -identity "$iuser"  -properties *
    $display = $arrdp.displayname
    $infodisplay.text = "Displayname: " + $display}
}


Function MkDir
{
# Create a Folder in the selected path
$global:dir = $tentry.text
$dpath = $chkuser.selecteditem
$global:dirpath = $dpath + "\" + $global:dir
New-item "$dirpath" -type directory
$infodisplay.visible = $True
$infodisplay.Text = " Sucessfully Created Directory at the following location :`r`n$dirpath"

}

Function ACL
{
#Set Acl for the selected Folder, The warning about not responding is the time it applies the new right to the folder, if it an old folder with alot of file and subdirectory it might take a while.
$infodisplay.text = "This might take a while don't close if not responding"
$acl = Get-Acl $global:dirpath
$acl.GetAccessRules($true, $true, [System.Security.Principal.NTAccount])
$acl.SetAccessRuleProtection($true, $true)
$rule = New-Object System.Security.AccessControl.FileSystemAccessRule "$global:grpname","$global:rights", "ContainerInherit, ObjectInherit", "None", "Allow"
$acl.addAccessRule($rule)
Set-Acl $global:dirpath $acl
$acl | Format-List

}

Function MapDrv
{
# I prefered mapping the path to a mapped drive. You could drop the mapping part and only use Path's.
# In my case 2 Mapped drive are where most of our file are on the FS so that's why i only approched this way with mapped drive.
$cmbuser.visible = $true
$tuser.text = "Which Path"
If (!(Test-Path R:))
    {
    $map = new-object -ComObject WScript.Network
    $map.MapNetworkDrive("R:", "\\serverpath", $true)
        }
If (!(Test-Path S:))
    {
    $map = new-object -ComObject WScript.Network
    $map.MapNetworkDrive("S:", "\\serverpath", $true)
        }
#Feed the cmbuser combobox with the 2 Network Drive
if ($cmbuser.items.count -eq 0) {
$cmbuser.items.add("\\serverpath (R:)")
$cmbuser.items.add("\\serverpath (S:)")}
$bvalidate.visible = $True
$chkuser.visible = $True

}

Function listDrv
{
# Check which Drive the user wan't to use.
if ($cmbuser.SelectedIndex -eq 0) { 
$drv = "R:"
$chkuser.items.add($drv)
}
elseif ($cmbuser.SelectedIndex -eq 1) { 
$drv = "S:"
$chkuser.items.add($drv)}
#Get all the subfolders of the selected path
$arrdrv = Get-ChildItem  $drv | ?{ $_.PSIsContainer }
# Feed the checklistbox with the subfolders
foreach($dir in $arrdrv)
                     {
                        $chkuser.items.add($dir.FullName)
                                        }
                            

}

Function ListOU
{

$tuser.text = "OU"
$tuser.visible = $true
$cmbuser.visible =$true
$lchkuser.visible = $true
$chkuser.visible = $True
$entry.text = "Grp Name to Create"
$entry.visible = $True
$tentry.visible = $true

# Query my Ou of all my security groups and Feed the combobox with al lthe ou containing my Groups.
if($cmbuser.items.count -eq 0){
foreach($ou in $arrgrpou)
                {
                  $cmbuser.items.add($ou.Name)
                                        }
                                       
                                        }
}

Function ListSecGrp
{
    $chk.text = "Add User"
    $lchkuser.visible = $true
    $lchkuser.text = " Reference only"
    $index = $cmbuser.selectedindex
    $iou = $arrgrpou[$index]
    $global:ou = $iou.DistinguishedName
    #List all the security group under the Ou mentionned in ListOU
    $arrgrp = Get-ADGroup -Filter * -SearchBase "$global:ou" | sort
    if ($cmbuser.selectedindex -ne -1){
    if($chkuser.items.count -ne $arrgrp.count){
    #Feed the checklistbox with all the security Group (This part is used for Reference only to make the creation easier for long scurity name)
    foreach($grp in $arrgrp)
                {
                  $chkuser.items.add($grp.Name)
                  $cmbuser.enabled = $false
                  $bvalidate.visible = $True   
                  $chk.visible = $True        
                              }}
                                        }
}

Function ChkGrp 
{
$infodisplay.visible = $True
$grpchk = $tentry.text

#Verify if the group that the user want to create exist or not.
if (dsquery group -name "$grpchk"){$infodisplay.text = "Group already exist"}
elseif ($grpchk -ne "" ) {$infodisplay.text = "Group Name OK"
        $tentry.enabled = $False
        $bapply.visible = $true
        $bvalidate.visible = $False
        $bclear.visible = $true
        $chkuser.enabled = $false
        $global:grpchkok = "1"
        }

}

Function CrAdGrp
{
#Create an Ad Security Group
$global:grpname = $tentry.text
NEW-ADGroup –name “$global:grpname” –groupscope Global –path "$global:ou"
$infodisplay.text = "Created $global:grpname"
}

Function AdduserGrp
{
#Querying the Ad for the users samaccountname in the array.
$arrsecuser = $chkuser.checkeditems
$arrsecuser2 = @()
        foreach($user in $arrsecuser)
                {
                    
                    $arrsecuser2 += Get-ADUser -filter * | where {$_.name -eq "$user"} | select -expandproperty samaccountname
                   
                    
                    }
#Adding users to the group selected or created.
        foreach($user2 in $arrsecuser2)
                {
                    Add-ADGroupMember -Identity $global:grpname -Members $user2
                    $infodisplay.text = $infodisplay.text + "User: $user2 Added to security"
                    }

}

Function RmvuserGrp
{
$arrsecuser = $chkuser.checkeditems
$arrsecuser2 = @()
#Querying the Ad for the users samaccountname in the array.
        foreach($user in $arrsecuser)
                {
                    
                    $arrsecuser2 += Get-ADUser -filter * | where {$_.name -eq "$user"} | select -expandproperty samaccountname
                   
                    
                    }
#Removing users to the group selected .
        foreach($user2 in $arrsecuser2)
                {
                    Remove-ADGroupMember -Identity "$global:grpname" -Members $user2 -confirm:$False
                    $infodisplay.text = $infodisplay.text + "$user2 Removed from security"
                    }


}

Function querygrp 
{
#Searching for a Group with the name Like the user typed.
    $cmbuser.items.clear() 
    $FindGrp = $tentry.text
    $arrqgrp = Get-ADGroup -Filter * |where {$_.name -like "$findGrp*"}|select -expandproperty name |sort
    if($findGrp -ne ""){
    foreach($grp in $arrqgrp)
                {
                   $cmbuser.items.add($grp) 
                    }}
if ($global:choice -eq 5)
{
    if ($chkuser.items.count -eq 0)
    {
        foreach($user in $arrac)
                {
                   $chkuser.items.add($user.name) 
                    }
        }
    }



}

Function AclRights
{
#Adding the Acl Rights to the checklist Box
            $lchkuser.visible = $true
            $lchkuser.text = "Rights"
            $chkuser.items.add("FullControl")
            $chkuser.items.add("Modify")
            $chkuser.items.add("ReadAndExecute, Write")
            $chkuser.items.add("Write")
            $chkuser.items.add("Read")
            $chkuser.items.add("Synchronize")
            $chkuser.items.add("AppendData")
            $chkuser.items.add("ChangePermissions")
            $chkuser.items.add("CreateDirectories")
            $chkuser.items.add("CreateFiles")
            $chkuser.items.add("Delete")
            $chkuser.items.add("DeleteSubdirectoriesAndFiles")
            $chkuser.items.add("ExecuteFile")
            $chkuser.items.add("ListDirectory")
            $chkuser.items.add("ReadAttributes")
            $chkuser.items.add("ReadData")
            $chkuser.items.add("ReadExtendedAttributes")
            $chkuser.items.add("ReadPermissions")
            $chkuser.items.add("TakeOwnership")
            $chkuser.items.add("Traverse")
            $chkuser.items.add("WriteAttributes")
            $chkuser.items.add("WriteData")
            $chkuser.items.add("WriteExtendedAttributes")
            }

$blist_OnClick= 
{
$infodisplay.Visible = $True
$global:choice = $lchoice.Selectedindex
switch ($global:choice) 
    { 
        0 {
            locked
            $bapply.text = "Unlock"
            $bapply.visible = $true
            $bclear.visible = $true
            $blist.visible = $false
            $lchoice.enabled = $false
                    } 

        1 {
            $lchoice.enabled = $false
            $tentry.visible = $true
            $infodisplay.Visible = $True
            if ($chkuser.Items.Count -eq 0) 
            {
                lastlogon
                
                }
 
                    }

        2 {
            $lchoice.enabled = $false
            $entry.text = " Displayname to Change"
            $entry.visible = $true
            $tentry.visible = $true
            feedcmbuser
            if ($cmbuser.selectedindex -ne -1)
            {InfoDN
            $cmbuser.enabled = $false
            $blist.visible = $false
            $bvalidate.visible = $True
            $bclear.Visible = $true}
                  }

        3 {
            $lchoice.enabled = $false
             mapdrv 
                if ($cmbuser.selectedindex -ne -1)
                    {    
                        ListDrv
                        }
                        $entry.text = " Folder Name to Create"
                        $entry.visible = $true
                        $tentry.visible = $true
        
                    }
             
        4 {  
            $lchoice.enabled = $false
                $tentry.enabled = $true
                $cmbuser.enabled = $True
                
                listou
                ListSecGrp
                $chkuser.enabled = $True

          }

        5 { 
            $lchoice.enabled = $false
            $entry.visible = $true
            $entry.text = "Find Group"
            $tentry.visible = $true
            $cmbuser.visible = $true
            $tuser.Visible = $true
            $tuser.text = "Group Found"
            $chkuser.visible = $true
            $lchkuser.visible = $true
            $lchkuser.text = "Users to add"
            querygrp 
            $bvalidate.visible = $true
        
          }

        6 {  
            $lchoice.enabled = $false
            $entry.visible = $true
            $entry.text = "Find Group"
            $tentry.visible = $true
            $cmbuser.visible = $true
            $tuser.Visible = $true
            $tuser.text = "Group Found"
            $chkuser.visible = $true
            $lchkuser.visible = $true
            $lchkuser.text = "Users to Remove"
            querygrp 
            $bvalidate.visible = $true
            
          }

        7 { 
        #Auto Feed the combobox with all the security group and checklistbox with the acl.
            $lchoice.enabled = $false
            $entry.visible = $true
            $entry.text = "Folder to search"
            $tentry.visible = $true
            $tuser.visible = $true
            $tuser.text = "Group"
            $cmbuser.visible = $true
            $chkuser.visible = $true
            $bclear.visible = $true

            AclRights

            foreach($grp in $arradgrp)
                {
                  $cmbuser.items.add($grp.Name)
                                        }
            $blist.visible = $false
            $bvalidate.visible = $true
        #This var is used from the create folder to know if the intention is to do all the work in 1 session : create folder,create group, adduser to group, and set acl).
        if ( $global:setaclfolder -eq $true)
        {
            $tuser.visible = $false            
            $entry.text = "Folder"
            $tentry.enabled = $False
            $tentry.Text = $global:dirpath
            $cmbuser.visible = $false
            $lchkuser.visible = $true
            $chkuser.enabled = $true
            $bvalidate.visible = $true}
                }
        }

}

$bvalidate_OnClick= 
{



switch ($global:choice) 
    { 
        0 {} 

        1 {} 

        2 {
            
           if ($tentry.text -ne "" ) {
           
            $tentry.enabled = $false
            $bapply.visible = $true
            $bvalidate.Visible = $false
           }

                  }

        3 {
            $infodisplay.visible = $True
            $infodisplay.text = ""
             if ($chkuser.CheckedItems.count -gt 1){
             $infodisplay.text = "Only one selection can be made"

             }

             if ($tentry.text -eq ""){
             $infodisplay.text = $infodisplay.text + "`r`nA folder name is needed"}

             if ($chkuser.CheckedItems.count -eq 1 -and $tentry.text -ne "")
                    {
                        $blist.visible = $false
                        $bvalidate.visible = $false
                        $bapply.visible = $True
                        $bclear.visible = $True
                        $tentry.enabled = $false
                        $cmbuser.Enabled = $False   
                        $chkuser.Enabled = $False
                        }
            $chk.visible = $True
            $chk.Text = "Create Grp + user?"
               }
             
        4 { 
        $blist.visible = $False
        Chkgrp  
        #Validation set in the Function
         if ($global:grpchkok -eq 1 ) 
            {
            #If the checkedbox is checked then for adding user clear chkuser and feed with user.
            if ($chk.checked -eq $true) 
                {  
                    $chkuser.enabled = $true
                    $chkuser.items.clear()
                    foreach($user in $arrac)
                        {
                         $chkuser.items.add($user.name)
                            }

                              }
                  }
            }

        5 { 
            if ($cmbuser.SelectedIndex -ne -1 -and $chkuser.checkeditems.count -ge 1)
            {
              $tentry.enabled = $False
              $cmbuser.enabled = $false
              $chkuser.enabled = $false
              $blist.visible = $false
              $bclear.visible = $true
              $bapply.Visible = $true
              $global:grpname = $cmbuser.SelectedItem
             


               }
           }

        6 { 

        #Feed chkuser with the user found from the group membership
            if ($cmbuser.SelectedIndex -ne -1 )
             {
              $tentry.enabled = $False
              $cmbuser.enabled = $false
              $bapply.Visible = $true
              $bclear.visible = $true
              $global:grpname = $cmbuser.SelectedItem
              $arrrmv = Get-ADGroupMember -identity "$global:grpname" | sort
              $blist.visible = $false
              $bvalidate.visible = $false
                foreach($user in $arrrmv)
                    {
                    $chkuser.items.add($user.name) 
                    }
                 }
           }

        7 {
        #Check if the Var for all function in one is true.
            $fpath = $tentry.text 
            write-host $fpath
            $infodisplay.visible = $true
            if ( $global:setaclfolder -eq $true) {
            $bapply.visible = $true
            write-host "e"}
            else {$global:grpname = $cmbuser.SelectedItem}
            
        #Test if the folder path exist
            if (Test-Path "$fpath" -PathType Container)
            {write-host eu
                $infodisplay.text = "Folder path valid"
        # WHy -ge 2, we use the synchronize so it is needed. So at least  eg: write + synch or read + synch
                if ($chkuser.checkeditems.count -ge 2 )
                    {
                        $infodisplay.text = ""
                        $cmbuser.enabled = $false
                        $tentry.enabled = $false
                        $blist.visible = $false
                        $bapply.visible = $true
                        #$bapply.Visible = $true
                        $bvalidate.visible = $false
                        $chkuser.enabled = $false
                        $global:rights = $chkuser.CheckedItems
                        write-host $global:rights
                        write-host "euh"
                        #Joining the array to add , + a "space" to each value. since the format used in the command ask for this.
                        $global:rights = $global:rights -join “, ”
                        $global:dirpath = $fpath
                        
                        }

                else {$infodisplay.text = "Check at least 2 rights and Make sure a group is selected"}

                }

            else{ 
            $infodisplay.text = "Folder path Invalid"}
            }
         }

        

}

$bapply_OnClick= 
{
switch ($global:choice) 
    { 
        0 {
         unlock
                } 

        1 {
         disableuser    
               } 

        2 {
        changedn
        infoDN
                  }

        3 {
        
        if ($chk.checked -eq $true )
        {
        #Setting the All in One Fucntion Var
        $global:setaclfolder = $true
         Mkdir
         $lchoice.Selectedindex = 4
         $bclear.PerformClick()
         $blist.PerformClick()          
         }
        else { mkdir}

         }
             
        4 {  
        $chkuser.enabled = $False
        $bapply.visible = $false
        if ($chk.checked -eq $true) {
            CrAdGrp
            AdduserGrp}
        else {CrAdGrp}
        # If the all in one is true then perform the choice of next fucntion 
        if ( $global:setaclfolder -eq $true)
                {
                $bclear.PerformClick()
                $lchoice.Selectedindex = 7
                $blist.PerformClick()}
          }

        5 {  
        
        AdduserGrp 
        $bapply.visible = $false
        $bvalidate.visible = $false
        $bclear.visible = $true
        
         }

        6 {  
        if ($chkuser.checkeditems.count -ge 1)
        { RmvuserGrp 
            $bapply.visible = $false
            $bvalidate.visible = $false
            $bclear.visible = $true
        } 
        
        }

        7 {
            
            acl
            $bclear.visible = $true
            $bapply.visible = $false
                }
        }

}

$bclear_OnClick= 
{


$blist.visible = $true
$tuser.visible = $false
$tentry.Visible = $false
$entry.Visible = $false
$chk.Visible = $false
$lchkuser.Visible = $false
$chkuser.Visible = $false
$cmbuser.Visible = $false
$bvalidate.Visible = $false
$bapply.Visible = $false
$bclear.Visible = $false
$bexport.Visible = $false

$lchoice.enabled = $true
$tentry.enabled = $true
$entry.enabled = $true
$chk.enabled = $true
$lchkuser.enabled = $true
$chkuser.enabled = $true
$cmbuser.enabled = $true
$bvalidate.enabled = $true
$bapply.enabled = $true
$bclear.enabled = $true
$bexport.enabled = $true
$blist.enabled = $true

$infodisplay.text = ""
$tentry.text = ""
$tuser.text = ""
$lchkuser.text = ""
$bapply.text = "Apply"

$chkuser.items.clear() 
$cmbuser.items.clear() 
$cmbuser.Text = ""

$chk.Checked = $false

$global:setaclfolder = ""
$global:dirpath = ""
$global:rights = ""
$global:grpname = ""
$global:grpchkok = ""

}

$bexport_OnClick= 
{
#TODO: Place custom script here

}

$handler_form1_Load= 
{
#TODO: Place custom script here

}


$OnLoadForm_StateCorrection=
{#Correct the initial state of the form to prevent the .Net maximized form issue
	$form1.WindowState = $InitialFormWindowState
}

#----------------------------------------------
#region Generated Form Code
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 411
$System_Drawing_Size.Width = 589
$form1.ClientSize = $System_Drawing_Size
$form1.DataBindings.DefaultDataSourceUpdateMode = 0
$form1.Name = "form1"
$form1.Text = "Ad Multipurpose"
$form1.add_Load($handler_form1_Load)


$blist.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 477
$System_Drawing_Point.Y = 25
$blist.Location = $System_Drawing_Point
$blist.Name = "blist"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 83
$blist.Size = $System_Drawing_Size
$blist.TabIndex = 17
$blist.Text = "List"
$blist.UseVisualStyleBackColor = $True
$blist.add_Click($blist_OnClick)

$form1.Controls.Add($blist)


$bexport.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 477
$System_Drawing_Point.Y = 149
$bexport.Location = $System_Drawing_Point
$bexport.Name = "bexport"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 83
$bexport.Size = $System_Drawing_Size
$bexport.TabIndex = 16
$bexport.Text = "Export"
$bexport.UseVisualStyleBackColor = $True
$bexport.Visible = $False
$bexport.add_Click($bexport_OnClick)

$form1.Controls.Add($bexport)


$bclear.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 477
$System_Drawing_Point.Y = 118
$bclear.Location = $System_Drawing_Point
$bclear.Name = "bclear"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 83
$bclear.Size = $System_Drawing_Size
$bclear.TabIndex = 15
$bclear.Text = "Clear"
$bclear.UseVisualStyleBackColor = $True
$bclear.Visible = $False
$bclear.add_Click($bclear_OnClick)

$form1.Controls.Add($bclear)


$bapply.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 477
$System_Drawing_Point.Y = 88
$bapply.Location = $System_Drawing_Point
$bapply.Name = "bapply"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 83
$bapply.Size = $System_Drawing_Size
$bapply.TabIndex = 14
$bapply.Text = "Apply"
$bapply.UseVisualStyleBackColor = $True
$bapply.Visible = $False
$bapply.add_Click($bapply_OnClick)

$form1.Controls.Add($bapply)


$bvalidate.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 477
$System_Drawing_Point.Y = 59
$bvalidate.Location = $System_Drawing_Point
$bvalidate.Name = "bvalidate"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 83
$bvalidate.Size = $System_Drawing_Size
$bvalidate.TabIndex = 13
$bvalidate.Text = "Validate"
$bvalidate.UseVisualStyleBackColor = $True
$bvalidate.Visible = $False
$bvalidate.add_Click($bvalidate_OnClick)

$form1.Controls.Add($bvalidate)

$infodisplay.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 353
$System_Drawing_Point.Y = 232
$infodisplay.Location = $System_Drawing_Point
$infodisplay.Name = "infodisplay"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 142
$System_Drawing_Size.Width = 207
$infodisplay.Size = $System_Drawing_Size
$infodisplay.TabIndex = 12
$infodisplay.Visible = $False

$form1.Controls.Add($infodisplay)

$lchkuser.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 31
$System_Drawing_Point.Y = 243
$lchkuser.Location = $System_Drawing_Point
$lchkuser.Name = "lchkuser"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 21
$System_Drawing_Size.Width = 260
$lchkuser.Size = $System_Drawing_Size
$lchkuser.TabIndex = 11
$lchkuser.Visible = $False

$form1.Controls.Add($lchkuser)


$chkuser.DataBindings.DefaultDataSourceUpdateMode = 0
$chkuser.FormattingEnabled = $True
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 26
$System_Drawing_Point.Y = 267
$chkuser.Location = $System_Drawing_Point
$chkuser.Name = "chkuser"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 94
$System_Drawing_Size.Width = 315
$chkuser.Size = $System_Drawing_Size
$chkuser.TabIndex = 8
$chkuser.Visible = $False

$form1.Controls.Add($chkuser)


$chk.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 27
$System_Drawing_Point.Y = 210
$chk.Location = $System_Drawing_Point
$chk.Name = "chk"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 126
$chk.Size = $System_Drawing_Size
$chk.TabIndex = 7
$chk.Text = "Add user to group"
$chk.UseVisualStyleBackColor = $True
$chk.Visible = $False
$chk.add_CheckedChanged($handler_chk_CheckedChanged)

$form1.Controls.Add($chk)


$Entry.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 250
$System_Drawing_Point.Y = 149
$Entry.Location = $System_Drawing_Point
$Entry.Name = "Entry"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 21
$System_Drawing_Size.Width = 132
$Entry.Size = $System_Drawing_Size
$Entry.TabIndex = 4
$Entry.Text = "Entry"
$Entry.Visible = $False

$form1.Controls.Add($Entry)

$tentry.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 250
$System_Drawing_Point.Y = 168
$tentry.Location = $System_Drawing_Point
$tentry.Name = "tentry"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 132
$tentry.Size = $System_Drawing_Size
$tentry.TabIndex = 3
$tentry.Visible = $False

$form1.Controls.Add($tentry)

$tuser.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 26
$System_Drawing_Point.Y = 147
$tuser.Location = $System_Drawing_Point
$tuser.Name = "tuser"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 21
$System_Drawing_Size.Width = 132
$tuser.Size = $System_Drawing_Size
$tuser.TabIndex = 2
$tuser.Text = "User"
$tuser.Visible = $False

$form1.Controls.Add($tuser)

$cmbuser.AutoCompleteMode = 3
$cmbuser.AutoCompleteSource = 256
$cmbuser.DataBindings.DefaultDataSourceUpdateMode = 0
$cmbuser.FormattingEnabled = $True
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 26
$System_Drawing_Point.Y = 168
$cmbuser.Location = $System_Drawing_Point
$cmbuser.Name = "cmbuser"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 21
$System_Drawing_Size.Width = 190
$cmbuser.Size = $System_Drawing_Size
$cmbuser.TabIndex = 1
$cmbuser.Visible = $False

$form1.Controls.Add($cmbuser)

$lchoice.DataBindings.DefaultDataSourceUpdateMode = 0
$lchoice.FormattingEnabled = $True
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 27
$System_Drawing_Point.Y = 16
$lchoice.Location = $System_Drawing_Point
$lchoice.Name = "lchoice"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 121
$System_Drawing_Size.Width = 341
$lchoice.Size = $System_Drawing_Size
$lchoice.TabIndex = 0

$form1.Controls.Add($lchoice)

#endregion Generated Form Code

#Save the initial state of the form
$InitialFormWindowState = $form1.WindowState
#Init the OnLoad event to correct the initial state of the form
$form1.add_Load($OnLoadForm_StateCorrection)
#Show the Form
$form1.ShowDialog()| Out-Null

} #End Function

#Call the Function
GenerateForm
