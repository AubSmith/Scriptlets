#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 6d007436-eb8d-48a2-8c5d-141ddaa66ef3
# Source File: D:\Code\PowerShell\Server Config.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
YQ8AAB+LCAAAAAAABADdl11v2jAUhu8n7T9Yvo6A8DFACpEK/djUUipg3e4qk5xQr46NHKcl/fVz
EugosMVpaVVNSIgk5815zzmPY+KMwRP3IJNjogjSPyIqeA/XKzZ2P39CyBlJOqecsFPK4JKE4E5A
6jA0EDyg88oiCpzqTkyunP0CTyGVLKCHJ0mkIKz8oNwXD1HlVMgw/7bQvksWul5ZaVZq6cdCg5ip
WEKPQ6wkYRa6imeMeueQTMUd8N6s3SYtr/XF7jaaUOt0MeLaSg8H+n6559wyRt4tZb7UEqzPKClY
lNeqPV9JsQCpkpX2KFZi4hEGQ+EDdi8FB6e6jvmLZsAocDWhj1pQ7zQtZNc7haIhWdJQS/piid1T
wqLiPEPKy0rS2WB3uyGFsrSWM0kXE5Uwrf9K/eJUU1gq/JyVXc3Jve7USnAhiL/r7SY97VSzwLWq
mKt+rJTgb07WLEtzsqTqX0ztoYp7t0Jity+0Xi+AMZ3fqp3u7OqOKWFiPoZI+8XugHAPmIHsQnhE
6YKxa3fbFuo2DDQ5KX8KNJBkVUzFBQQqXSkGinyNtFsWqpt4mpLZN+6Dpt0oOgPQ0Pv3CK5pFBOW
Id4n3t1AsHREUxnvYb2aI/hBgRydvw7HdIKlaRydlyOx8QIQjXK8GKq6MVRGPv4rpM6AgyQKxpPR
VTm4no+8adLkzZFvJjYevt1plJ6+bTz9tSVk6KkcCFu7ov4z4d3ta8ZNdmVrZ/zYEI1itYhVvq/H
MqPi+DUw2aWfH3sMvClUNfNHSmYNeZvekA+KUJMd/nCI7WtRIWrPD46iCEKNBUTr2NWZxA0jT0hG
ZwdAy6k+3XU7Sw7ze+Q4+IIpzpi+pr1PIkkeKJ+/JFetEbSCdmDbfqtGGqQ418+QvUtNAyHh8Ime
DnPknermK7X7G1AwuQFhDwAA#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.135
     Generated on:       5/03/2017 8:58 PM
     Generated by:       Aubrey Smith
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2017
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-Server_Config_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formServerConfig = New-Object 'System.Windows.Forms.Form'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$buttonGenerateRSOP = New-Object 'System.Windows.Forms.Button'
	$buttonOutputConfigurationD = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formServerConfig_Load={
			
	}
	
	$Global:servers = Get-Content .\ServerList.txt
	
	###########################
	# Create LoadWMI Function #
	###########################
	
	function Global:LoadWMI
	{
		Foreach ($s in $servers)
		{
			Import-module servermanager
			
			$CPUInfo = Get-WmiObject Win32_Processor -ComputerName $s #Get CPU Information
			$OSInfo = Get-WmiObject Win32_OperatingSystem -ComputerName $s #Get OS Information
			#Get Memory Information. The data will be shown in a table as MB, rounded to the nearest second decimal.
			$OSTotalVirtualMemory = [math]::round($OSInfo.TotalVirtualMemorySize / 1MB, 2)
			$OSTotalVisibleMemory = [math]::round(($OSInfo.TotalVisibleMemorySize / 1MB), 2)
			$PhysicalMemory = Get-WmiObject CIM_PhysicalMemory -ComputerName $s | Measure-Object -Property capacity -Sum | % { [Math]::Round(($_.sum / 1GB), 2) }
			Foreach ($CPU in $CPUInfo)
			{
				$infoObject = New-Object PSObject
				#The following add data to the infoObjects.	
				Add-Member -inputObject $infoObject -memberType NoteProperty -name "ServerName" -value $CPU.SystemName
				Add-Member -inputObject $infoObject -memberType NoteProperty -name "LogicalCores" -value $CPU.NumberOfLogicalProcessors
				Add-Member -inputObject $infoObject -memberType NoteProperty -name "OS_Name" -value $OSInfo.Caption
				Add-Member -inputObject $infoObject -memberType NoteProperty -name "OS_Version" -value $OSInfo.Version
				Add-Member -inputObject $infoObject -memberType NoteProperty -name "TotalPhysical_Memory_GB" -value $PhysicalMemory
				Add-Member -inputObject $infoObject -memberType NoteProperty -name "TotalVirtual_Memory_MB" -value $OSTotalVirtualMemory
				Add-Member -inputObject $infoObject -memberType NoteProperty -name "TotalVisable_Memory_MB" -value $OSTotalVisibleMemory
				$infoObject | FT ServerName, LogicalCores, OS_Name, TotalPhysical_Memory_GB, TotalVirtual_Memory_MB, TotalVisable_Memory_MB   >> .\Server_Inventory_$((Get-Date).ToString('MM-dd-yyyy'))_$s.csv
				Get-WmiObject -Class "Win32_Share" -ComputerName $s -Property Name, Path | FT Name, Path >> .\Server_Inventory_$((Get-Date).ToString('MM-dd-yyyy'))_$s.csv
				Get-WindowsFeature -ComputerName $s| where-object { $_.Installed -eq $True } | format-list DisplayName >> .\Server_Inventory_$((Get-Date).ToString('MM-dd-yyyy'))_$s.csv
				Get-WMIObject -Class "Win32_Product" -ComputerName $s -Property Name, Version | Sort Name | FT Name, Version >> .\Server_Inventory_$((Get-Date).ToString('MM-dd-yyyy'))_$s.csv
				Get-WmiObject -Class "win32_quickfixengineering" -ComputerName $s | Select-Object -Property "Description", "HotfixID" >> .\Server_Inventory_$((Get-Date).ToString('MM-dd-yyyy'))_$s.csv
			}
		}
	}
	
	########################
	# Create RSOP Function #
	########################
	
	function Global:GenerateRSOP
	{
		Get-Module GroupPolicy
		Import-Module GroupPolicy
		
		Foreach ($s in $servers)
		{
		
			Get-GPResultantSetOfPolicy -Computer $s -ReportType html -Path .\RSOP_$s.htm
		}
	}
	
	$buttonOutputConfigurationD_Click={
		LoadWMI	
	}
	
	$buttonGenerateRSOP_Click={
		GenerateRSOP
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formServerConfig.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonGenerateRSOP.remove_Click($buttonGenerateRSOP_Click)
			$buttonOutputConfigurationD.remove_Click($buttonOutputConfigurationD_Click)
			$formServerConfig.remove_Load($formServerConfig_Load)
			$formServerConfig.remove_Load($Form_StateCorrection_Load)
			$formServerConfig.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formServerConfig.SuspendLayout()
	#
	# formServerConfig
	#
	$formServerConfig.Controls.Add($buttonExit)
	$formServerConfig.Controls.Add($buttonOK)
	$formServerConfig.Controls.Add($buttonGenerateRSOP)
	$formServerConfig.Controls.Add($buttonOutputConfigurationD)
	$formServerConfig.AutoScaleMode = 'None'
	$formServerConfig.ClientSize = '284, 128'
	$formServerConfig.MaximizeBox = $False
	$formServerConfig.MinimizeBox = $False
	$formServerConfig.Name = 'formServerConfig'
	$formServerConfig.SizeGripStyle = 'Hide'
	$formServerConfig.Text = 'Server Config'
	$formServerConfig.add_Load($formServerConfig_Load)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.DialogResult = 'Cancel'
	$buttonExit.Location = '197, 93'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.RightToLeft = 'No'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 3
	$buttonExit.Text = 'Exit'
	$buttonExit.UseVisualStyleBackColor = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Left'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '13, 93'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 2
	$buttonOK.Text = 'OK'
	$buttonOK.UseVisualStyleBackColor = $True
	#
	# buttonGenerateRSOP
	#
	$buttonGenerateRSOP.Location = '13, 42'
	$buttonGenerateRSOP.Name = 'buttonGenerateRSOP'
	$buttonGenerateRSOP.Size = '183, 23'
	$buttonGenerateRSOP.TabIndex = 1
	$buttonGenerateRSOP.Text = 'Generate RSOP'
	$buttonGenerateRSOP.UseVisualStyleBackColor = $True
	$buttonGenerateRSOP.add_Click($buttonGenerateRSOP_Click)
	#
	# buttonOutputConfigurationD
	#
	$buttonOutputConfigurationD.Location = '13, 13'
	$buttonOutputConfigurationD.Name = 'buttonOutputConfigurationD'
	$buttonOutputConfigurationD.Size = '183, 23'
	$buttonOutputConfigurationD.TabIndex = 0
	$buttonOutputConfigurationD.Text = 'Output configuration detail'
	$buttonOutputConfigurationD.UseVisualStyleBackColor = $True
	$buttonOutputConfigurationD.add_Click($buttonOutputConfigurationD_Click)
	$formServerConfig.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formServerConfig.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formServerConfig.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formServerConfig.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formServerConfig.ShowDialog()

} #End Function

#Call the form
Show-Server_Config_psf | Out-Null
