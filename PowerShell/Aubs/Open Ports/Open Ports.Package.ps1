#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 1c62599f-2eb5-4abf-8f52-9f83c98f51d8
# Source File: D:\Code\PowerShell\Open Ports\Open Ports.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
Nv4PSZ1/AUriduOfJAAA#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.135
     Generated on:       5/03/2017 9:02 PM
     Generated by:       Aubrey Smith
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2017
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-Open_Ports_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formOpenPorts = New-Object 'System.Windows.Forms.Form'
	$buttonRunProcess = New-Object 'System.Windows.Forms.Button'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$buttonCopy = New-Object 'System.Windows.Forms.Button'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonRun = New-Object 'System.Windows.Forms.Button'
	$imagelistButtonBusyAnimation = New-Object 'System.Windows.Forms.ImageList'
	$timerProcessTracker = New-Object 'System.Windows.Forms.Timer'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formOpenPorts_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	$buttonExit_Click={
		#TODO: Place custom script here
		$formOpenPorts.Close()
	}
	
	$buttonRun_Click={
		Update-Text
	}
	
	$buttonCopy_Click={
		#The following requires STA mode
	#	if($textbox1.Text.Length -gt 0)
	#	{
	#		[System.Windows.Forms.Clipboard]::SetText($textbox1.Text)
	#	}
		#Alternative - Does not require STA
		$richtextbox1.SelectAll() #Select all the text
		$richtextbox1.Copy()	#Copy selected text to clipboard
		$richtextbox1.Select(0,0); #Unselect all the text
	}
	
	#################################################
	# Customize LoadText Function
	#################################################
	
	function Update-Text
	{
		$richtextbox1.Text = NETSTAT -a -o -n | Out-String
	}
	
	
	
	
	
	
	
	
	
	$buttonRunProcess_Click={
		$buttonRunProcess.Enabled = $false
		#TODO: Set the process path there	
		Add-ProcessTracker -FilePath "$env:windir/System32/notepad.exe" `
		-CompletedScript {
			$buttonRunProcess.Enabled = $true	
			$buttonRunProcess.ImageIndex = -1
		}`
		-UpdateScript {
			#Animate the Button
			if($null -ne $buttonRunProcess.ImageList)
			{
				if($buttonRunProcess.ImageIndex -lt $buttonRunProcess.ImageList.Images.Count - 1)
				{
					$buttonRunProcess.ImageIndex += 1
				}
				else
				{
					$buttonRunProcess.ImageIndex = 0		
				}
			}
		}
	}
	
	$processTracker_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
		#Stop any pending processes
		#Stop-ProcessTracker
	}
	
	$timerProcessTracker_Tick={
		Update-ProcessTracker
	}
	
	#region Process Tracker
	$ProcessTrackerList = New-Object System.Collections.ArrayList
	function Add-ProcessTracker
	{
		<#
			.SYNOPSIS
				Add a new process to the ProcessTracker and starts the timer.
		
			.DESCRIPTION
				Add a new process to the ProcessTracker and starts the timer.
		
			.PARAMETER  FilePath
				The path to executable.
		
			.PARAMETER ArgumentList
				The arguments to pass to the process.
		
			.PARAMETER  CompleteScript
				The script block that will be called when the process is complete.
				The process is passed as an argument. The process argument is null when the job fails.
		
			.PARAMETER  UpdateScript
				The script block that will be called each time the timer ticks.
				The process is passed as an argument.
		
			.EXAMPLE
				 Add-ProcessTracker -FilePath "$env:windir/System32/notepad.exe" `
				-CompletedScript {
					Param([System.Diagnostics.Process]$Process)
					$button.Enable = $true
				}`
				-UpdateScript {
					Param([System.Diagnostics.Process]$Process)
					Function-Animate $button
				}
		
			.LINK
				
		#>
		
		Param(
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[string]$FilePath,
		$ArgumentList = $null,
		[ScriptBlock]$CompletedScript,
		[ScriptBlock]$UpdateScript)
		
		#Start the Job
		if($ArgumentList)
		{
			$process = Start-Process -FilePath $FilePath -ArgumentList $ArgumentList -PassThru
		}
		else
		{
			$process = Start-Process -FilePath $FilePath -PassThru
		}
		
		if($null -ne $process)
		{
			#Create a Custom Object to keep track of the Job & Script Blocks
			$members = @{	"Process" = $process;
							"CompleteScript" = $CompletedScript;
							"UpdateScript" = $UpdateScript}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$ProcessTrackerList.Add($psObject)	
			
			#Start the Timer
			if(-not $timerProcessTracker.Enabled)
			{
				$timerProcessTracker.Start()
			}
		}
		elseif($null -ne $CompletedScript)
		{
			#Failed
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
	
	}
	
	function Update-ProcessTracker
	{
		<#
			.SYNOPSIS
				Checks the status of each job on the list.
		#>
		
		#Poll the jobs for status updates
		$timerProcessTracker.Stop() #Freeze the Timer
		
		for($index =0; $index -lt $ProcessTrackerList.Count; $index++)
		{
			$psObject = $ProcessTrackerList[$index]
			
			if($null -ne $psObject) 
			{
				if($null -ne $psObject.Process)
				{
					if($psObject.Process.HasExited)
					{				
						#Call the Complete Script Block
						if($null -ne $psObject.CompleteScript)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Process
						}
						
						$ProcessTrackerList.RemoveAt($index)
						$index-- #Step back so we don't skip a job
					}
					elseif($null -ne $psObject.UpdateScript)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Process
					}
				}
			}
			else
			{
				$ProcessTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if($ProcessTrackerList.Count -gt 0)
		{
			$timerProcessTracker.Start()#Resume the timer	
		}	
	}
	
	function Stop-ProcessTracker
	{
		<#
			.SYNOPSIS
				Stops and removes all processes from the list.
		#>
		#Stop the timer
		$timerProcessTracker.Stop()
		
		#Remove all the processes
		while($ProcessTrackerList.Count -gt 0)
		{
			$process = $ProcessTrackerList[0].Process
			$ProcessTrackerList.RemoveAt(0)
			if(-not $psObject.Process.HasExited)
			{
				Stop-Process -InputObject $process
			}
		}
	}
	#endregion
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formOpenPorts.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonRunProcess.remove_Click($buttonRunProcess_Click)
			$buttonCopy.remove_Click($buttonCopy_Click)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonRun.remove_Click($buttonRun_Click)
			$formOpenPorts.remove_FormClosed($processTracker_FormClosed)
			$formOpenPorts.remove_Load($formOpenPorts_Load)
			$timerProcessTracker.remove_Tick($timerProcessTracker_Tick)
			$formOpenPorts.remove_Load($Form_StateCorrection_Load)
			$formOpenPorts.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formOpenPorts.SuspendLayout()
	#
	# formOpenPorts
	#
	$formOpenPorts.Controls.Add($buttonRunProcess)
	$formOpenPorts.Controls.Add($richtextbox1)
	$formOpenPorts.Controls.Add($buttonCopy)
	$formOpenPorts.Controls.Add($buttonExit)
	$formOpenPorts.Controls.Add($buttonRun)
	$formOpenPorts.AutoScaleDimensions = '6, 13'
	$formOpenPorts.AutoScaleMode = 'Font'
	$formOpenPorts.ClientSize = '584, 411'
	$formOpenPorts.Name = 'formOpenPorts'
	$formOpenPorts.StartPosition = 'CenterScreen'
	$formOpenPorts.Text = 'Open Ports'
	$formOpenPorts.add_FormClosed($processTracker_FormClosed)
	$formOpenPorts.add_Load($formOpenPorts_Load)
	#
	# buttonRunProcess
	#
	$buttonRunProcess.Anchor = 'Bottom'
	$buttonRunProcess.ImageList = $imagelistButtonBusyAnimation
	$buttonRunProcess.Location = '334, 376'
	$buttonRunProcess.Name = 'buttonRunProcess'
	$buttonRunProcess.Size = '75, 23'
	$buttonRunProcess.TabIndex = 3
	$buttonRunProcess.Text = 'Notepad'
	$buttonRunProcess.TextImageRelation = 'ImageBeforeText'
	$buttonRunProcess.UseVisualStyleBackColor = $True
	$buttonRunProcess.add_Click($buttonRunProcess_Click)
	#
	# richtextbox1
	#
	$richtextbox1.Anchor = 'Top, Bottom, Left, Right'
	$richtextbox1.BackColor = 'Window'
	$richtextbox1.Font = 'Courier New, 8.25pt'
	$richtextbox1.HideSelection = $False
	$richtextbox1.Location = '12, 12'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.ReadOnly = $True
	$richtextbox1.Size = '559, 354'
	$richtextbox1.TabIndex = 6
	$richtextbox1.Text = ''
	$richtextbox1.WordWrap = $False
	#
	# buttonCopy
	#
	$buttonCopy.Anchor = 'Bottom'
	$buttonCopy.Location = '173, 376'
	$buttonCopy.Name = 'buttonCopy'
	$buttonCopy.Size = '75, 23'
	$buttonCopy.TabIndex = 2
	$buttonCopy.Text = '&Copy'
	$buttonCopy.UseVisualStyleBackColor = $True
	$buttonCopy.add_Click($buttonCopy_Click)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Location = '495, 376'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 4
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# buttonRun
	#
	$buttonRun.Anchor = 'Bottom, Left'
	$buttonRun.Location = '12, 376'
	$buttonRun.Name = 'buttonRun'
	$buttonRun.Size = '75, 23'
	$buttonRun.TabIndex = 1
	$buttonRun.Text = '&Run'
	$buttonRun.UseVisualStyleBackColor = $True
	$buttonRun.add_Click($buttonRun_Click)
	#
	# imagelistButtonBusyAnimation
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAATABAAEwAQABEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/
AP8AugADwgH/Az4B/wM+Af8DwgH/MAADwgH/A14B/wOCAf8DwgH/sAADPgH/AwAB/wMAAf8DPgH/
MAADggH/Az4B/wM+Af8DXgH/gAADwgH/Az4B/wM+Af8DwgH/IAADPgH/AwAB/wMAAf8DPgH/A8IB
/wNeAf8DggH/A8IB/xAAA8IB/wM+Af8DPgH/A8IB/wNeAf8DPgH/Az4B/wNeAf8EAAOSAf8DkgH/
A8IB/3AAAz4B/wMAAf8DAAH/Az4B/yAAA8IB/wM+Af8DPgH/A8IB/wOCAf8DPgH/Az4B/wOCAf8Q
AAM+Af8DAAH/AwAB/wM+Af8DwgH/A14B/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAz4B/wMA
Af8DAAH/Az4B/zAAA14B/wM+Af8DPgH/A14B/xAAAz4B/wMAAf8DAAH/Az4B/xAAA5IB/wOSAf8D
kgH/A8IB/3AAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wNeAf8DggH/A8IB/xAAA8IB/wM+Af8DPgH/
A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wOCAf8DXgH/A8IB
/zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAM+Af8DAAH/AwAB/wM+Af8wAANeAf8DPgH/
Az4B/wNeAf8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAM+Af8DAAH/AwAB
/wM+Af8wAAOCAf8DPgH/Az4B/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPC
Af8wAAPCAf8DPgH/Az4B/wPCAf8wAAPCAf8DggH/A14B/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80
AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DXgH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQA
A8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAANeAf8DPgH/Az4B/wNeAf8wAAOSAf8DggH/A5IB
/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/
A4IB/wM+Af8DPgH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB
/wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DXgH/A8IB/yAAA8IB/wPC
Af8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAAD
wgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/
A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8D
XgH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPC
Af8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/Az4B/wM+Af8DggH/A8IB/wOSAf8DkgH/A8IB
/wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPC
Af8DwgH/cAADXgH/Az4B/wM+Af8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8D
kgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/A14B/wNeAf8DwgH/FAADwgH/A8IB/xQAA8IB/wOS
Af8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DPgH/Az4B/wPCAf8wAAPCAf8DXgH/A4IB/wPCAf8w
AAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADPgH/AwAB/wMAAf8DPgH/MAADggH/Az4B/wM+
Af8DXgH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADPgH/AwAB/wMAAf8D
PgH/MAADXgH/Az4B/wM+Af8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/
MAADwgH/Az4B/wM+Af8DwgH/MAADwgH/A14B/wNeAf8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAAD
wgH/A8IB/3wAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wNeAf8DggH/A8IB/zAAA8IB/wPCAf8DkgH/
A8IB/xAAA8IB/wM+Af8DPgH/A8IB/1AAAz4B/wMAAf8DAAH/Az4B/zAAA4IB/wM+Af8DPgH/A14B
/zAAA5IB/wOCAf8DggH/A5IB/xAAAz4B/wMAAf8DAAH/Az4B/1AAAz4B/wMAAf8DAAH/Az4B/zAA
A14B/wM+Af8DPgH/A4IB/wOSAf8DPgH/Az4B/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/A14B
/wOCAf8DwgH/Az4B/wMAAf8DAAH/Az4B/1AAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wOCAf8DXgH/
A8IB/wM+Af8DAAH/AwAB/wM+Af8gAAPCAf8DkgH/A5IB/wPCAf8DggH/Az4B/wM+Af8DXgH/A8IB
/wM+Af8DPgH/A8IB/6AAAz4B/wMAAf8DAAH/Az4B/zAAA14B/wM+Af8DPgH/A4IB/7AAA8IB/wM+
Af8DPgH/A8IB/zAAA8IB/wOCAf8DXgH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEB
AAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHA
AQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B
8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+
AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B
/AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/
AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8B
wwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8
AT8E/wH8AT8B/AE/Cw=='))
	#endregion
	$imagelistButtonBusyAnimation.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelistButtonBusyAnimation.TransparentColor = 'Transparent'
	#
	# timerProcessTracker
	#
	$timerProcessTracker.add_Tick($timerProcessTracker_Tick)
	$formOpenPorts.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formOpenPorts.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formOpenPorts.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formOpenPorts.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formOpenPorts.ShowDialog()

} #End Function

#Call the form
Show-Open_Ports_psf | Out-Null
